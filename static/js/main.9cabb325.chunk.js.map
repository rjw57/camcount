{"version":3,"sources":["usePeople.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["PEOPLE_SOURCE","process","usePeople","React","isLoading","state","setState","a","fetch","response","status","Error","json","people","error","App","generatedAt","Date","console","log","className","counts","map","idx","count","title","description","key","toLocaleString","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"sOAkBMA,EAAa,UAAMC,mEAuBVC,EArBU,WAAoB,IAAD,EAChBC,WAA4B,CAACC,WAAW,IADxB,mBACnCC,EADmC,KAC5BC,EAD4B,KAkB1C,OAfAH,aAAgB,WAAO,sBACrB,4BAAAI,EAAA,6DACED,EAAS,CAACF,WAAW,IADvB,kBAG2BI,MAAMR,GAHjC,UAI2B,OADjBS,EAHV,QAIgBC,OAJhB,sBAKc,IAAIC,MAAM,4BALxB,mBAOIL,EAPJ,UAO8CG,EAASG,OAPvD,0BAOcR,WAAW,EAAOS,OAPhC,uEASIP,EAAS,CAACF,WAAW,EAAOU,MAAK,OATrC,yDADqB,KAahB,CAACR,IAEDD,GCPMU,MA1Bf,WAAgB,IAAD,EACeb,IAArBW,EADM,EACNA,OAAQT,EADF,EACEA,UACTY,EAAcH,GAAU,IAAII,KAAKJ,EAAOG,aAE9C,OADAE,QAAQC,IAAIH,GAEV,yBAAKI,UAAU,OACb,4BAAQA,UAAU,cAChB,yDAEEhB,GAAa,yBAAKgB,UAAU,eAAf,kBAEbP,GAAUA,EAAOQ,OAAOC,KAAI,WAA8BC,GAA9B,IAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,MAAOC,EAAhB,EAAgBA,YAAhB,OAC1B,yBAAKN,UAAU,YAAYO,IAAKJ,GAC9B,4BAAKE,GACL,2BAAIC,GACJ,2BAAIF,OAIZ,4BAAQJ,UAAU,cACdJ,GAAe,oDAAgBA,EAAYY,iBAA5B,QCbLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA/B,GACLI,QAAQJ,MAAMA,EAAMgC,a","file":"static/js/main.9cabb325.chunk.js","sourcesContent":["import * as React from 'react'\n\nexport interface People {\n  generatedAt: string;\n  counts: {\n    count: number;\n    description: string;\n    query: string;\n    title: string;\n  }[];\n}\n\nexport interface PeopleState {\n  people?: People;\n  isLoading: boolean;\n  error?: Error;\n}\n\nconst PEOPLE_SOURCE = `${process.env.REACT_APP_PEOPLE_SOURCE}`;\n\nexport const usePeople = (): PeopleState => {\n  const [state, setState] = React.useState<PeopleState>({isLoading: false});\n\n  React.useEffect(() => {(\n    async () => {\n      setState({isLoading: true});\n      try {\n        const response = await fetch(PEOPLE_SOURCE);\n        if(response.status !== 200) {\n            throw new Error('Error response from API.');\n        }\n        setState({isLoading: false, people: await response.json()});\n      } catch(error) {\n        setState({isLoading: false, error});\n      }\n    }\n  )();}, [setState]);\n\n  return state;\n}\n\nexport default usePeople;\n","import React from 'react';\nimport './App.css';\n\nimport usePeople from './usePeople';\n\nfunction App() {\n  const {people, isLoading} = usePeople();\n  const generatedAt = people && new Date(people.generatedAt);\n  console.log(generatedAt);\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>University People Counts</h1>\n      </header>\n        { isLoading && <div className=\"App-loading\">Loading &hellip;</div> }\n        {\n          people && people.counts.map(({count, title, description}, idx) => (\n            <div className=\"App-count\" key={idx}>\n              <h2>{title}</h2>\n              <p>{description}</p>\n              <p>{count}</p>\n            </div>\n          ))\n        }\n      <footer className=\"App-footer\">\n        { generatedAt && <>Generated at {generatedAt.toLocaleString()}.</> }\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}