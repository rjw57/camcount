{"version":3,"sources":["usePeople.ts","CountCard.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["PEOPLE_SOURCE","process","usePeople","React","isLoading","state","setState","a","fetch","response","status","Error","json","people","error","withStyles","theme","createStyles","root","count","color","palette","primary","main","props","title","description","classes","className","Typography","variant","component","toLocaleString","gutterBottom","useStyles","makeStyles","height","App","generatedAt","Date","LinearProgress","Box","p","pb","format","Grid","container","spacing","counts","map","idx","key","item","xs","sm","lg","xl","CountCard","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"4SAkBMA,EAAa,UAAMC,mEAuBVC,EArBU,WAAoB,IAAD,EAChBC,WAA4B,CAACC,WAAW,IADxB,mBACnCC,EADmC,KAC5BC,EAD4B,KAkB1C,OAfAH,aAAgB,WAAO,sBACrB,4BAAAI,EAAA,6DACED,EAAS,CAACF,WAAW,IADvB,kBAG2BI,MAAMR,GAHjC,UAI2B,OADjBS,EAHV,QAIgBC,OAJhB,sBAKc,IAAIC,MAAM,4BALxB,mBAOIL,EAPJ,UAO8CG,EAASG,OAPvD,0BAOcR,WAAW,EAAOS,OAPhC,uEASIP,EAAS,CAACF,WAAW,EAAOU,MAAK,OATrC,yDADqB,KAahB,CAACR,IAEDD,G,gBChBMU,eAfA,SAACC,GAAD,OAAkBC,YAAa,CAC5CC,KAAM,GAGNC,MAAO,CACLC,MAAOJ,EAAMK,QAAQC,QAAQC,UAUlBR,EAAmB,SAACS,GAAkB,IAC5CL,EAAsCK,EAAtCL,MAAOM,EAA+BD,EAA/BC,MAAOC,EAAwBF,EAAxBE,YAAaC,EAAWH,EAAXG,QAClC,OACE,uBAAKC,UAAWD,EAAQT,MACtB,gBAACW,EAAA,EAAD,CAAYF,QAAS,CAAET,KAAMS,EAAQR,OAASW,QAAQ,KAAKC,UAAU,OACjEZ,EAAMa,kBAEV,gBAACH,EAAA,EAAD,CAAYC,QAAQ,QAAQC,UAAU,MAAME,eAAgBP,GAAeD,GACzEC,GAAe,gBAACG,EAAA,EAAD,CAAYC,QAAQ,QAAQV,MAAM,gBAAgBW,UAAU,OAAQL,OChBrFQ,EAAYC,aAAW,SAACnB,GAAD,MAAY,CACvCE,KAAM,CACJkB,OAAQ,YAuCGC,EAnCH,WACV,IAAMV,EAAUO,IADA,EAEYhC,IAArBW,EAFS,EAETA,OAAQT,EAFC,EAEDA,UACTkC,EAAczB,GAAU,IAAI0B,KAAK1B,EAAOyB,aAC9C,OACE,yBAAKV,UAAWD,EAAQT,MACpBd,GAAa,kBAACoC,EAAA,EAAD,MAEbF,GAAe,kBAACG,EAAA,EAAD,CAAKC,EAAG,EAAGC,GAAI,GAC5B,kBAACd,EAAA,EAAD,CAAYC,QAAQ,QAAQC,UAAU,OAAtC,SACQ,kBAAC,IAAD,CAAQa,OAAO,sBAAsBN,GAD7C,gHAOJ,kBAACG,EAAA,EAAD,CAAKC,EAAG,GACN,kBAACG,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GAEvBlC,GAAUA,EAAOmC,OAAOC,KAAI,WAA8BC,GAA9B,IAAE/B,EAAF,EAAEA,MAAOM,EAAT,EAASA,MAAOC,EAAhB,EAAgBA,YAAhB,OAC1B,kBAACmB,EAAA,EAAD,CAAMM,IAAKD,EAAKE,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAC7C,kBAACf,EAAA,EAAD,CAAKE,GAAI,GACP,kBAACc,EAAD,CACEtC,MAAOA,EAAOM,MAAOA,EAAOC,YAAaA,aC/BvCgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA5D,GACL6D,QAAQ7D,MAAMA,EAAM8D,c","file":"static/js/main.7c8cd9e3.chunk.js","sourcesContent":["import * as React from 'react'\n\nexport interface People {\n  generatedAt: string;\n  counts: {\n    count: number;\n    description: string;\n    query: string;\n    title: string;\n  }[];\n}\n\nexport interface PeopleState {\n  people?: People;\n  isLoading: boolean;\n  error?: Error;\n}\n\nconst PEOPLE_SOURCE = `${process.env.REACT_APP_PEOPLE_SOURCE}`;\n\nexport const usePeople = (): PeopleState => {\n  const [state, setState] = React.useState<PeopleState>({isLoading: false});\n\n  React.useEffect(() => {(\n    async () => {\n      setState({isLoading: true});\n      try {\n        const response = await fetch(PEOPLE_SOURCE);\n        if(response.status !== 200) {\n            throw new Error('Error response from API.');\n        }\n        setState({isLoading: false, people: await response.json()});\n      } catch(error) {\n        setState({isLoading: false, error});\n      }\n    }\n  )();}, [setState]);\n\n  return state;\n}\n\nexport default usePeople;\n","import * as React from 'react';\n\nimport { createStyles, Theme, withStyles, WithStyles } from '@material-ui/core/styles';\nimport {\n  Typography\n} from '@material-ui/core';\n\nconst styles = (theme: Theme) => createStyles({\n  root: {\n  },\n\n  count: {\n    color: theme.palette.primary.main,\n  },\n});\n\nexport interface Props extends WithStyles<typeof styles> {\n  count: number;\n  title: React.ReactNode;\n  description?: React.ReactNode;\n}\n\nexport default withStyles(styles)((props: Props) => {\n  const {count, title, description, classes} = props;\n  return (\n    <div className={classes.root}>\n      <Typography classes={{ root: classes.count }} variant=\"h3\" component=\"div\">\n        { count.toLocaleString() }\n      </Typography>\n      <Typography variant=\"body1\" component=\"div\" gutterBottom={!!description}>{ title }</Typography>\n      { description && <Typography variant=\"body2\" color=\"textSecondary\" component=\"div\">{ description }</Typography> }\n    </div>\n  );\n});\n","import React from 'react';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport {\n  Box,\n  Grid,\n  LinearProgress,\n  Typography,\n} from '@material-ui/core';\nimport Moment from 'react-moment';\n\nimport usePeople from './usePeople';\nimport CountCard from './CountCard';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    height: '100%',\n  },\n}));\n\nconst App = () => {\n  const classes = useStyles();\n  const {people, isLoading} = usePeople();\n  const generatedAt = people && new Date(people.generatedAt);\n  return (\n    <div className={classes.root}>\n      { isLoading && <LinearProgress /> }\n      {\n        generatedAt && <Box p={2} pb={0}>\n          <Typography variant=\"body1\" component=\"div\">\n            As of <Moment format=\"dddd, Do MMMM YYYY\">{generatedAt}</Moment>,\n            the University of Cambridge Information Services has active\n            accounts for the following numbers of people.\n          </Typography>\n        </Box>\n      }\n      <Box p={2}>\n        <Grid container spacing={3}>\n        {\n          people && people.counts.map(({count, title, description}, idx) => (\n            <Grid key={idx} item xs={12} sm={6} lg={4} xl={3}>\n              <Box pb={2}>\n                <CountCard\n                  count={count} title={title} description={description}\n                />\n              </Box>\n            </Grid>\n          ))\n        }\n        </Grid>\n      </Box>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}